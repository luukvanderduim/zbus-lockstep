// tests/attribute_macro.rs
#![allow(unnameable_test_items)]

use zbus_lockstep_macros::validate;
use zvariant::{OwnedObjectPath, Type};

#[test]
fn test_validate_enum() {
    #[validate(signal: "U32AsEnum")]
    #[derive(Debug, Type)]
    enum NodeTypes {
        _Option1,
        _Option2,
    }
    test_NodeTypes_type_signature();
}

#[test]
fn test_validate_macro_node_add_path_as_env_variable() {
    // set env variable to enable validation
    std::env::set_var("LOCKSTEP_XML_PATH", "./xml");

    #[validate]
    #[derive(Debug, Type)]
    struct AddNodeEvent {
        _name: String,
        _path: OwnedObjectPath,
    }

    // now call the test generated by the `validate` macro
    test_AddNodeEvent_type_signature();
}

#[test]
fn test_validate_macro_node_add_path_as_arg() {
    #[validate(xml: "./xml")]
    #[derive(Debug, Type)]
    struct AddNodeEvent {
        _name: String,
        _path: OwnedObjectPath,
    }

    // now call the test generated by the `validate` macro
    test_AddNodeEvent_type_signature();
}

#[test]
fn test_validate_macro_path_node_remove_as_env_variable() {
    // set env variable to enable validation
    std::env::set_var("LOCKSTEP_XML_PATH", "./xml");

    #[validate]
    #[derive(Debug, Type)]
    struct RemoveNodeEvent {
        _name: String,
        _path: OwnedObjectPath,
    }

    // now call the test generated by the `validate` macro
    test_RemoveNodeEvent_type_signature();
}

#[test]
fn test_validate_macro_remove_node_path_as_arg() {
    #[validate(xml: "./xml")]
    #[derive(Debug, Type)]
    struct RemoveNodeEvent {
        _name: String,
        _path: OwnedObjectPath,
    }

    // now call the test generated by the `validate` macro
    test_RemoveNodeEvent_type_signature();
}

#[test]
fn test_validate_macro_path_node_remove_with_custom_name() {
    // set env variable to enable validation
    std::env::set_var("LOCKSTEP_XML_PATH", "./xml");

    #[validate(signal: "RemoveNode")]
    #[derive(Debug, Type)]
    struct DeletionEvent {
        _name: String,
        _path: OwnedObjectPath,
    }

    // now call the test generated by the `validate` macro
    test_DeletionEvent_type_signature();
}

#[should_panic]
#[test]
fn test_validate_macro_non_matching_signature_of_type() {
    #[validate]
    #[derive(Debug, Type)]
    struct RemoveNode {
        _name: String,
        _path: OwnedObjectPath,
        _is_real: bool,
    }

    // now call the test generated by the `validate` macro
    test_RemoveNode_type_signature();
}
